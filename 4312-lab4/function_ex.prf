(function_ex
 (Check1_TCC1 0
  (Check1_TCC1-1 nil 3653915037 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Check1 0
  (Check1-1 nil 3653915044
   ("" (flatten)
    (("" (expand "f2")
      (("" (expand "f1")
        (("" (apply-extensionality)
          (("" (lift-if) (("" (prop) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((f2 const-decl "RANGE" function_ex nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" function_ex nil)
    (DOMAIN type-eq-decl nil function_ex nil)
    (RANGE type-decl nil function_ex nil)
    (c adt-constructor-decl "(c?)" function_ex nil)
    (c? adt-recognizer-decl "[RANGE -> boolean]" function_ex nil)
    (b adt-constructor-decl "(b?)" function_ex nil)
    (b? adt-recognizer-decl "[RANGE -> boolean]" function_ex nil)
    (a adt-constructor-decl "(a?)" function_ex nil)
    (a? adt-recognizer-decl "[RANGE -> boolean]" function_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f1 const-decl "RANGE" function_ex nil))
   shostak)))

