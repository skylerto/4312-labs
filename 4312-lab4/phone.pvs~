phone: THEORY
BEGIN
    N: TYPE             % Names
    P: TYPE             % Phone Numbers
    B: TYPE = [N -> setof[P]]  % Phone Books
    VB: TYPE = {b:B |(FORALL (x,y:N): x /= y => disjoint?(b(x), b(y)))}

    nm, x: VAR N
    pn: VAR P
    bk: VAR VB

    FindPhone(bk, nm): setof[P] = bk(nm)

    UnusedPhoneNum(bk, pn): bool = (FORALL nm: NOT member(pn, FindPhone(bk, nm)))

    AddPhone(bk, nm, pn): VB = IF UnusedPhoneNum(bk,pn) THEN bk WITH [(nm) := add(pn, bk(nm))] ELSE bk ENDIF
    
    DelPhoneNum(bk,nm,pn): VB = bk WITH [(nm) := remove(pn, bk(nm))]

    FindAdd: CONJECTURE UnusedPhoneNum(bk, pn) = member(pn, FindPhone(AddPhone(bk,nm,pn), nm))

    DelAdd: CONJECTURE DelPhoneNum(AddPhone(bk, nm, pn), nm, pn) = DelPhoneNum(bk, nm, pn)
END phone
