(test (input_TCC1 0
       (input_TCC1-1 nil 3656961959 ("" (cond-disjoint-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (delta const-decl "posreal" test nil)
         (DTIME type-eq-decl nil Time nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil))
      (input_TCC2 0
       (input_TCC2-1 nil 3656961959 ("" (cond-coverage-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (delta const-decl "posreal" test nil)
         (DTIME type-eq-decl nil Time nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil))
      (check1 0
       (check1-1 nil 3656961960 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (held_for const-decl "bool" Time nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil)
         (delta const-decl "posreal" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil))
        shostak))
      (check1a 0
       (check1a-1 nil 3656961966 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak))
      (check2 0
       (check2-1 nil 3656961971 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (held_for const-decl "bool" Time nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil)
         (delta const-decl "posreal" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil))
        shostak))
      (check2a 0
       (check2a-1 nil 3656961976 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak))
      (check3 0
       (check3-1 nil 3656961979 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (held_for const-decl "bool" Time nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil)
         (delta const-decl "posreal" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil))
        shostak))
      (check3a 0
       (check3a-1 nil 3656961983 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak))
      (check4 0
       (check4-1 nil 3656962047 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (held_for const-decl "bool" Time nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil)
         (delta const-decl "posreal" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil))
        shostak))
      (check4a 0
       (check4a-1 nil 3656962051 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak))
      (check6 0
       (check6-1 nil 3656962055 ("" (grind) nil nil)
        ((held_for const-decl "bool" Time nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (delta const-decl "posreal" test nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak))
      (check6a 0
       (check6a-1 nil 3656962104 ("" (grind) nil nil)
        ((real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil))
        shostak)))

