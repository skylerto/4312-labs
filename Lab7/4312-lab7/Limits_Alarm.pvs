Limits_Alarm[delta: posreal] : THEORY
BEGIN
importing Time[delta] importing Hysteresis[delta]
% Monitored Variables
H : VAR [DTIME -> real] % high limit
X : VAR [DTIME -> real] % signal value
L : VAR [DTIME -> real] % low limit
EPS : VAR [DTIME -> real] % hysteresis band size % controlled variables
QH : VAR [DTIME -> BOOL] % high alarm
Q : VAR [DTIME -> BOOL] % any alarm
QL : VAR [DTIME -> BOOL] % low alarm

r1, r2, r3 : VAR [DTIME -> real]
nzr : VAR [DTIME -> {r: real | r /= 0}] b1, b2, b3 : VAR [DTIME -> BOOL]
% basic functions for the FBD implementation
minus (r1, r2, r3) : bool =
FORALL (i: DTIME): r3(i) = r1(i) - r2(i)
plus (r1, r2, r3) : bool =
FORALL (i: DTIME): r3(i) = r1(i) + r2(i)
divide (r1, nzr, r3): bool =
FORALL (i: DTIME): r3(i) = r1(i) / nzr(i)
gte_one (b1, b2, b3) : bool = FORALL (i: DTIME):
b3(i) = IF b1(i) + b2(i) >= 1 THEN 1 ELSE 0 ENDIF

% FBD implementation of the LIMITS_ALARM block
limits_alarm_fbd (H, X, L, EPS, QH, Q, QL): bool = EXISTS (w1, w2, w3 : [DTIME -> real]):
		 divide (EPS, (LAMBDA (i: DTIME): 2.0), w1)
		 AND minus(H,w1, w2)
		 AND plus(L, w1, w3)
		 AND hysteresis_req(X, w2, w1, QH)
		 AND hysteresis_req (w3 , X, w1, QL)
		 AND gte_one (QH,QL, Q)



env_1 (H, X, L, EPS): bool = FORALL (i: DTIME): EPS(i) > 0

high_alarm_req (H, X, L, EPS): bool = env_1 (H, X, L, EPS) IMPLIES X(i) < H(i) AND X(i) > H(i) - EPS(i)

low_alarm_req (H, X, L, EPS): bool = env_1 (H, X, L, EPS) IMPLIES  X(i) > L(i) AND X(i) < L(i) + EPS(i)



limits_alarm_req (H, X, L, EPS, QH, Q, QL): bool =
high_alarm_req (H, X, L, EPS, QH)
AND low_alarm_req (H, X, L, EPS, QL)
AND gte_one (QH, QL, Q)

correct_limits_alarm_fbd : THEOREM
	(env_1 (H, X, L, EPS)
	AND
        limits_alarm_fbd (H, X, L, EPS, QH, Q, QL))
IMPLIES
      limits_alarm_req (H, X, L, EPS, QH, Q, QL)

% 2nd environment assumption. What does it mean?
env_2 (H, X, L, EPS): bool = ???
no_simultaneous_alarms (QH, Q, QL): bool =
FORALL (i: DTIME): NOT( QH(i) = 1 AND QL(i) = 1 )
req_entails_inv : THEOREM
( env_1 (H, X, L, EPS) AND env_2 (H, X, L, EPS)
AND limits_alarm_req (H, X, L, EPS, QH, Q, QL) ) IMPLIES no_simultaneous_alarms (QH, Q, QL)


END Limits_Alarm
