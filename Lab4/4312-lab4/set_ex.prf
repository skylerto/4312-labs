(set_ex
 (conj1 0
  (conj1-1 nil 3653912912
   ("" (expand "member")
    (("" (expand "SET1") (("" (propax) nil nil)) nil)) nil)
   ((SET1 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil))
   shostak))
 (conj2 0
  (conj2-1 nil 3653912928
   ("" (expand "SET1") (("" (propax) nil nil)) nil)
   ((SET1 const-decl "set[RESOURCE]" set_ex nil)) shostak))
 (conj3 0
  (conj3-1 nil 3653912937
   ("" (expand "SET3")
    (("" (expand "add")
      (("" (expand "member")
        (("" (expand "UNIVERSE")
          (("" (apply-extensionality)
            (("" (prop) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (UNIVERSE const-decl "set[RESOURCE]" set_ex nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (TRUE const-decl "bool" booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil))
   shostak))
 (conj4 0
  (conj4-1 nil 3653913379
   ("" (expand "SET3")
    (("" (expand "SET1")
      (("" (expand "remove")
        (("" (expand "member")
          (("" (apply-extensionality)
            (("" (iff)
              (("" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (apply-extensionality) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SET1 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (RESOURCE type-decl nil set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "set" sets nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil))
   shostak))
 (conj5 0
  (conj5-1 nil 3653913659
   ("" (expand "SET1")
    ((""
      (expand "SET2
")
      (("" (expand "union")
        (("" (expand "member")
          (("" (expand "UNIVERSE")
            (("" (apply-extensionality)
              (("" (prop) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SET2 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (UNIVERSE const-decl "set[RESOURCE]" set_ex nil)
    (union const-decl "set" sets nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil))
   shostak))
 (conj6 0
  (conj6-1 nil 3653913941
   ("" (expand "SET1")
    (("" (expand "SET2")
      (("" (expand "intersection")
        (("" (expand "member")
          (("" (expand "emptyset")
            (("" (apply-extensionality)
              (("" (prop)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (apply-extensionality) nil nil)
                 ("4" (apply-extensionality) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SET2 const-decl "set[RESOURCE]" set_ex nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (FALSE const-decl "bool" booleans nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil))
   shostak))
 (conj7 0
  (conj7-1 nil 3653914730
   ("" (expand "singleton")
    (("" (expand "SET2")
      (("" (expand "SET3")
        (("" (expand "intersection")
          (("" (expand "member")
            (("" (apply-extensionality)
              (("" (iff)
                (("" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SET2 const-decl "set[RESOURCE]" set_ex nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (RESOURCE type-decl nil set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r4 adt-constructor-decl "(r4?)" set_ex nil)
    (r4? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (SET3 const-decl "set[RESOURCE]" set_ex nil)
    (singleton const-decl "(singleton?)" sets nil))
   shostak))
 (conj8 0
  (conj8-1 nil 3653914869
   ("" (expand "SET1")
    (("" (expand "add")
      (("" (expand "remove")
        (("" (expand "member")
          (("" (apply-extensionality)
            (("" (iff)
              (("" (prop)
                (("1" (assert) nil nil)
                 ("2" (apply-extensionality) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (r3? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r3 adt-constructor-decl "(r3?)" set_ex nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (r1? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r1 adt-constructor-decl "(r1?)" set_ex nil)
    (r2? adt-recognizer-decl "[RESOURCE -> boolean]" set_ex nil)
    (r2 adt-constructor-decl "(r2?)" set_ex nil)
    (RESOURCE type-decl nil set_ex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "set" sets nil)
    (SET1 const-decl "set[RESOURCE]" set_ex nil))
   shostak)))

