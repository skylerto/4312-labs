(signum (sign_TCC1 0
         (sign_TCC1-1 nil 3652265955 ("" (cond-disjoint-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_gt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil))
          nil))
        (sign_TCC2 0
         (sign_TCC2-1 nil 3652265955 ("" (cond-coverage-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_gt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil))
          nil))
        (sum_TCC1 0
         (sum_TCC1-1 nil 3652265955 ("" (subtype-tcc) nil nil)
          ((boolean nonempty-type-decl nil booleans nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (>= const-decl "bool" reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (int_minus_int_is_int application-judgement "int" integers
            nil)
           (real_ge_is_total_order name-judgement
            "(total_order?[real])" real_props nil))
          nil))
        (sum_TCC2 0
         (sum_TCC2-1 nil 3652265955 ("" (termination-tcc) nil nil) nil
          nil))
        (closed_form 0
         (closed_form-1 nil 3652265994
          ("" (induct-and-simplify "n") nil nil)
          ((number nonempty-type-decl nil numbers nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (real nonempty-type-from-decl nil reals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (int nonempty-type-eq-decl nil integers nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (>= const-decl "bool" reals nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (pred type-eq-decl nil defined_types nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (sum def-decl "nat" signum nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (/= const-decl "boolean" notequal nil)
           (nznum nonempty-type-eq-decl nil number_fields nil)
           (/ const-decl "[numfield, nznum -> numfield]" number_fields
              nil)
           (* const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (nat_induction formula-decl nil naturalnumbers nil)
           (nnrat_div_posrat_is_nnrat application-judgement
            "nonneg_rat" rationals nil)
           (nnint_times_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (even_times_int_is_even application-judgement "even_int"
            integers nil)
           (mult_divides1 application-judgement "(divides(n))" divides
            nil)
           (mult_divides2 application-judgement "(divides(m))" divides
            nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (even_plus_odd_is_odd application-judgement "odd_int"
            integers nil)
           (posint_times_posint_is_posint application-judgement
            "posint" integers nil)
           (posrat_div_posrat_is_posrat application-judgement "posrat"
            rationals nil)
           (int_minus_int_is_int application-judgement "int" integers
            nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil))
          shostak)))

