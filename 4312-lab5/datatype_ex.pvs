stack_soln: THEORY
BEGIN
  stack[T: TYPE]: DATATYPE
  BEGIN
    empty: empty?
    push(top:T, pop:stack): nonempty?
  END stack

% %%% ADT file generated from stacks
% Constructors: empty, push
% Accessors: top, pop
% Recognizers: empty?, non empty?
%
% stack_adt[T: TYPE]: THEORY
% BEGIN
% stack: TYPE
% empty?, non_empty?: [stack -> boolean]
% empty: (empty?)
% push: [[T, stack] -> (non_empty?)]
% top: [(non_empty?) -> T]
% pop: [(non_empty?) -> stack]

  st1: stack[real] =
    (pop(push(3.0, push(2.0, push(1.0, empty)))))

%   st1
% = (pop(push(3.0, push(2.0, push(1.0, empty)))))
% = push(2.0, push(1.0, empty))
% = [2, 1]

  st2: stack[real] =
    push(2.0, push(1.0, empty))

%    st2
% =  push(2.0, push(1.0, empty))
% =  [2, 1]

% st1 and st2 both define the same stack value [2, 1]

  check1: CONJECTURE st1 = st2

% ;;; Proof check1-1 for formula stack_soln.check1
% ;;; developed with shostak decision procedures
% ("" (expand "st1") (expand "st2") (propax))

  check2: CONJECTURE top(st1) = 2

% ;;; Proof check2-1 for formula stack_soln.check2
% ;;; developed with shostak decision procedures
% ("" (expand "st1")

%   top(st1)
% = top((pop(push(3.0, push(2.0, push(1.0, empty))))))
% = top(push(2.0, push(1.0, empty)))
% = 2

 
%Definition by recursion
  depth(s:stack[nat]): RECURSIVE nat =
    (CASES s OF
      empty: 0,
      push(a,s1): 1 + depth(s1)
    ENDCASES)
    MEASURE s BY <<

  check3: CONJECTURE
    depth(st1) = 2

%|- check3 : PROOF
%|- (then (expand "st1") (expand "depth") (expand "depth") (expand "depth")
%|-  (propax))
%|- QED

End stack_soln

  % PVS automatically declares the following for you
  % empty? [T : TYPE] : [stack[T] -> bool]
  % nonempty? [T : TYPE] : [stack[T] -> bool]
  % CONSTRUCTORS
  % empty: stack[T]
  % push: [ T, stack[T] -> stack[T] ]
  % ACCESSORS (queries) using pattern matching
  % top [T : TYPE] (s: { s : stack[T] | nonempty?(s) }): T =
  %    CASES OF push(t, _): t ENDCASES
  % pop[T: TYPE]  (s: { s : stack[T] | nonempty?(s) }): stack[T] =
  %    CASES OF push(_, p): p ENDCASES



