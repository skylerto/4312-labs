("date" date conj0 0 (conj0-1 nil 3653142799 ("" (expand "leapyr") (("" (assert) (("" (flatten) (("" (expand "mod") (("" (expand "member") (("" (expand "LEAP") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nil application-judgement "below(m)" mod nil) (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil) (mod const-decl "{k | abs(k) < abs(j)}" mod nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (mult_divides1 application-judgement "(divides(n))" divides nil) (mult_divides2 application-judgement "(divides(m))" divides nil) (LEAP const-decl "set[nat]" date nil) (member const-decl "bool" sets nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (leapyr const-decl "bool" date nil)) shostak))("date" date conj0_TCC1 0 (conj0_TCC1-1 nil 3653142797 ("" (subtype-tcc) nil nil) nil nil))("date" date date_validity_check1 0 (date_validity_check1-1 nil 3652984697 ("" (expand "date_valid") (("" (assert) (("" (flatten) (("" (expand "MONTH31") (("" (expand "MONTH30") (("" (expand "Leapyr") (("" (prop) (("1" (assert) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (assert) nil nil) ("15" (assert) nil nil) ("16" (assert) nil nil) ("17" (assert) nil nil) ("18" (assert) nil nil) ("19" (assert) nil nil) ("20" (assert) nil nil) ("21" (assert) nil nil) ("22" (assert) nil nil) ("23" (assert) nil nil) ("24" (assert) nil nil) ("25" (assert) nil nil) ("26" (assert) nil nil) ("27" (assert) nil nil) ("28" (assert) nil nil) ("29" (assert) nil nil) ("30" (assert) nil nil) ("31" (assert) nil nil) ("32" (assert) nil nil) ("33" (assert) nil nil) ("34" (assert) nil nil) ("35" (assert) nil nil) ("36" (assert) nil nil) ("37" (assert) nil nil) ("38" (assert) nil nil) ("39" (assert) nil nil) ("40" (assert) nil nil) ("41" (assert) nil nil) ("42" (assert) nil nil) ("43" (assert) nil nil) ("44" (assert) nil nil) ("45" (assert) nil nil) ("46" (assert) nil nil) ("47" (assert) nil nil) ("48" (assert) nil nil) ("49" (assert) nil nil) ("50" (assert) nil nil) ("51" (assert) nil nil) ("52" (assert) nil nil) ("53" (assert) nil nil) ("54" (assert) nil nil) ("55" (assert) nil nil) ("56" (assert) nil nil) ("57" (assert) nil nil) ("58" (assert) nil nil) ("59" (assert) nil nil) ("60" (assert) nil nil) ("61" (assert) nil nil) ("62" (assert) nil nil) ("63" (assert) nil nil) ("64" (assert) nil nil) ("65" (assert) nil nil) ("66" (assert) nil nil) ("67" (assert) nil nil) ("68" (assert) nil nil) ("69" (assert) nil nil) ("70" (assert) nil nil) ("71" (assert) nil nil) ("72" (assert) nil nil) ("73" (assert) nil nil) ("74" (assert) nil nil) ("75" (assert) nil nil) ("76" (assert) nil nil) ("77" (assert) nil nil) ("78" (assert) nil nil) ("79" (assert) nil nil) ("80" (assert) nil nil) ("81" (assert) nil nil) ("82" (assert) nil nil) ("83" (assert) nil nil) ("84" (assert) nil nil) ("85" (assert) nil nil) ("86" (assert) nil nil) ("87" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((MONTH31 const-decl "set[MONTH]" date nil) (Leapyr const-decl "bool" date nil) (nil application-judgement "below(m)" mod nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (MONTH30 const-decl "set[MONTH]" date nil) (date_valid const-decl "bool" date nil)) shostak))("date" date d_TCC1 0 (d_TCC1-1 nil 3652984619 ("" (existence-tcc) nil nil) nil nil))("date" date m_TCC1 0 (m_TCC1-1 nil 3652984619 ("" (existence-tcc) nil nil) nil nil))("date" date y_TCC1 0 (y_TCC1-1 nil 3652984619 ("" (existence-tcc) nil nil) nil nil))("date" date MONTH30_TCC1 0 (MONTH30_TCC1-1 nil 3652984619 ("" (subtype-tcc) nil nil) nil nil))